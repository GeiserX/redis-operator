---
# CRD
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.1
  name: redis.cache.geiser.cloud
spec:
  group: cache.geiser.cloud
  names:
    kind: Redis
    listKind: RedisList
    plural: redis
    shortNames:
    - red
    singular: redis
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Redis is the Schema for the redis API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: RedisSpec defines the desired state of Redis
            properties:
              image:
                description: Docker image to deploy, defaults to bitnami/redis:8.0
                type: string
              persistence:
                description: Storage enables persistence - If Point-in-time snapshots
                  are there
                properties:
                  enabled:
                    type: boolean
                  size:
                    type: string
                  storageClass:
                    type: string
                type: object
              replicas:
                description: Number of Redis instances to deploy
                format: int32
                minimum: 1
                type: integer
              resources:
                description: Resources defines resource requests and limits
                properties:
                  limits:
                    description: ResourceList details resource units
                    properties:
                      cpu:
                        type: string
                      memory:
                        type: string
                    type: object
                  requests:
                    description: ResourceList details resource units
                    properties:
                      cpu:
                        type: string
                      memory:
                        type: string
                    type: object
                type: object
            required:
            - replicas
            type: object
          status:
            description: RedisStatus defines the observed state of Redis
            properties:
              message:
                type: string
              nodes:
                items:
                  type: string
                type: array
              status:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# RBAC Role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: manager-role
rules:
- apiGroups:
  - cache.geiser.cloud
  resources:
  - redis
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cache.geiser.cloud
  resources:
  - redis/finalizers
  verbs:
  - update
- apiGroups:
  - cache.geiser.cloud
  resources:
  - redis/status
  verbs:
  - get
  - patch
  - update
---
### RBAC RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: redis-operator
    app.kubernetes.io/managed-by: kustomize
  name: manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: manager-role
subjects:
- kind: ServiceAccount
  name: controller-manager
  namespace: system
---
# Manager
apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: redis-operator
    app.kubernetes.io/managed-by: kustomize
  name: redis-operator-system  # changed from default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-operator-controller-manager
  namespace: redis-operator-system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: redis-operator
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: redis-operator
    spec:
      serviceAccountName: controller-manager
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault # Recommended
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values: ["linux"]
                  - key: kubernetes.io/arch
                    operator: In
                    values: ["amd64"]
      containers:
        - name: manager
          image: drumsergio/redis-operator:0.0.1
          imagePullPolicy: Always
          command:
            - /manager
          args:
            - --leader-elect
            - --health-probe-bind-address=:8081
            # - --metrics-bind-address=:8080 # Prometheus
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            timeoutSeconds: 2
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 10
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
      terminationGracePeriodSeconds: 10