# ────────────────────────────────────────────────────────────────────────────
# CustomResourceDefinition  ─ cache.geiser.cloud/v1alpha1, Kind=Redis
# ────────────────────────────────────────────────────────────────────────────
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: redis.cache.geiser.cloud
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.1
spec:
  group: cache.geiser.cloud
  scope: Namespaced
  names:
    plural: redis
    singular: redis
    kind: Redis
    listKind: RedisList
    shortNames:
      - red
  versions:
    - name: v1alpha1
      served: true
      storage: true
      subresources:
        status: {}
      additionalPrinterColumns:
        - name: Ready
          jsonPath: .status.conditions[?(@.type=="Ready")].status
          type: string
        - name: Pass
          jsonPath: .status.conditions[?(@.type=="PasswordGenerated")].status
          type: string
        - name: Deploy
          jsonPath: .status.conditions[?(@.type=="DeploymentReady")].status
          type: string
        - name: Age
          jsonPath: .metadata.creationTimestamp
          type: date
      schema:
        openAPIV3Schema:
          type: object
          description: Redis is the Schema for the Redis API
          properties:
            apiVersion:
              type: string
              description: Standard Kubernetes field.
            kind:
              type: string
              description: Standard Kubernetes field.
            metadata:
              type: object
            spec:
              type: object
              required:
                - replicas
              properties:
                replicas:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 100
                  description: Number of Redis Pods to run
                image:
                  type: string
                  description: Docker image (defaults to bitnami/redis:8.0)
                resources:
                  type: object
                  description: CPU / memory requests & limits
                  properties:
                    requests:
                      type: object
                      properties:
                        cpu:
                          type: string
                        memory:
                          type: string
                    limits:
                      type: object
                      properties:
                        cpu:
                          type: string
                        memory:
                          type: string
                probes:
                  type: object
                  description: Liveness / readiness probe configuration
                  properties:
                    liveness:
                      $ref: "#/components/schemas/ProbeCfg"
                    readiness:
                      $ref: "#/components/schemas/ProbeCfg"
            status:
              type: object
              description: Observed state of Redis
              properties:
                nodes:
                  type: array
                  items:
                    type: string
                status:
                  type: string
                message:
                  type: string
                conditions:
                  type: array
                  items:
                    type: object
                    required:
                      - type
                      - status
                      - reason
                      - message
                      - lastTransitionTime
                    properties:
                      type:
                        type: string
                      status:
                        type: string
                        enum: ["True", "False", "Unknown"]
                      reason:
                        type: string
                      message:
                        type: string
                      observedGeneration:
                        type: integer
                        format: int64
                        minimum: 0
                      lastTransitionTime:
                        type: string
                        format: date-time
          components:
            schemas:
              ProbeCfg:
                type: object
                properties:
                  command:
                    type: array
                    items:
                      type: string
                  initialDelaySeconds:
                    type: integer
                    format: int32
                  periodSeconds:
                    type: integer
                    format: int32
                  timeoutSeconds:
                    type: integer
                    format: int32
                  failureThreshold:
                    type: integer
                    format: int32
---
# ────────────────────────────────────────────────────────────────────────────
# RBAC  (ClusterRole)
# ────────────────────────────────────────────────────────────────────────────
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: redis-operator-manager-role
rules:
  # Manage Redis CR
  - apiGroups: ["cache.geiser.cloud"]
    resources:
      - redis
      - redis/finalizers
      - redis/status
    verbs: ["get","list","watch","create","update","patch","delete"]

  # Deployments + Pods
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get","list","watch","create","update","patch","delete"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get","list","watch"]

  # Leader-election
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get","list","watch","create","update","patch"]
---
# ────────────────────────────────────────────────────────────────────────────
# RBAC  (ClusterRoleBinding)
# ────────────────────────────────────────────────────────────────────────────
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: redis-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: redis-operator-manager-role
subjects:
  - kind: ServiceAccount
    name: controller-manager
    namespace: redis-operator-system
---
# ────────────────────────────────────────────────────────────────────────────
# Namespace & ServiceAccount
# ────────────────────────────────────────────────────────────────────────────
apiVersion: v1
kind: Namespace
metadata:
  name: redis-operator-system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: redis-operator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: controller-manager
  namespace: redis-operator-system
---
# ────────────────────────────────────────────────────────────────────────────
# Operator Deployment
# ────────────────────────────────────────────────────────────────────────────
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-operator-controller-manager
  namespace: redis-operator-system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: redis-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: redis-operator
      annotations:
        kubectl.kubernetes.io/default-container: manager
    spec:
      serviceAccountName: controller-manager
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values: ["linux"]
                  - key: kubernetes.io/arch
                    operator: In
                    values: ["amd64","arm64"]
      terminationGracePeriodSeconds: 10
      containers:
        - name: manager
          image: drumsergio/redis-operator:0.0.1
          imagePullPolicy: Always
          command: ["/manager"]
          args:
            - --leader-elect
            - --health-probe-bind-address=:8081
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 250m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2